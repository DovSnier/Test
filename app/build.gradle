apply plugin: 'com.android.application'

android {

    compileSdkVersion rootProject.ext.compile_sdk_version
    buildToolsVersion rootProject.ext.build_tools_version

    defaultConfig {
        applicationId "com.dvsnier"
        minSdkVersion rootProject.ext.min_sdk_version
        targetSdkVersion rootProject.ext.target_sdk_version
        versionCode rootProject.ext.version_app_code
        versionName "${rootProject.ext.version_app_name}.${gitHashCode()}"
        buildConfigField "boolean", "DEVELOPE", "true"

        ndk {
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
        }

        manifestPlaceholders = [
                DVSNIER_VALUE: applicationId
        ]

        javaCompileOptions {
            annotationProcessorOptions {
                includeCompileClasspath = true
            }
        }

        packagingOptions {
            exclude "LICENSE-junit.txt"
            exclude "junit/runner/*"
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "dvsnier_${"${variant.productFlavors[0].name}".substring(6, "${variant.productFlavors[0].name}".length()).toLowerCase(Locale.getDefault(Locale.Category.FORMAT))}_${defaultConfig.versionName}.apk"
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }

    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions "color"

    productFlavors {
        flavorDebug {
            applicationId 'com.dvsnier.debug'
            resValue "string", "app_name", "dvsnier debug"
            manifestPlaceholders = [
                    DVSNIER_VALUE: applicationId
            ]
            dimension "color"
        }
        flavorTest {
            applicationId 'com.dvsnier.test'
            resValue "string", "app_name", "dvsnier test"
            manifestPlaceholders = [
                    DVSNIER_VALUE: applicationId
            ]
            dimension "color"
        }
        flavorRelease {
            applicationId 'com.dvsnier'
            resValue "string", "app_name", "dvsnier"
            manifestPlaceholders = [
                    DVSNIER_VALUE: applicationId
            ]
            dimension "color"
        }
    }
}

def gitHashCode() { return 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim() }

static def buildTime(boolean isPrint) {
    def date = new Date()
    if (isPrint) {
        return date.format('yyyy年MM月dd日 HH:mm:SS')
    } else {
        return date.format('yyyyMMddHHmm')
    }
}

task exportAppInfo() {
    doLast {
        def time = buildTime(true)
        def gitHashCode = gitHashCode()
        def applicationId = android.defaultConfig.applicationId
        def minSdkVersion = android.defaultConfig.minSdkVersion
        def targetSdkVersion = android.defaultConfig.targetSdkVersion
        def versionCode = android.defaultConfig.versionCode
        def versionName = android.defaultConfig.versionName
        File propertyFile = rootProject.file("property.txt")
        if (!propertyFile.exists()) {
            propertyFile.createNewFile()
        }
        propertyFile.withWriter('UTF-8') { writer ->
            writer.write(time.toString(), 0, time.toString().length())
            writer.newLine()
            writer.append("hashCode = " + gitHashCode + "\n")
            writer.append("applicationId = " + applicationId + "\n")
            writer.append("minSdkVersion = " + minSdkVersion + "\n")
            writer.append("targetSdkVersion = " + targetSdkVersion + "\n")
            writer.append("versionCode = " + versionCode + "\n")
            writer.append("versionName = " + versionName + "\n")
            writer.flush()
            writer.close()
        }
        println("exporting app information successfully.")
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation project(':framework:base')
    implementation project(':common:bean')
    implementation project(':research:interceptor')

    implementation "com.android.support:appcompat-v7:$rootProject.support_appcompat_version"
    implementation "com.android.support:support-annotations:$rootProject.support_annotations_version"
    implementation "com.android.support.constraint:constraint-layout:$rootProject.support_constraint_layout_version"

    //noinspection GradleDependency
    implementation "com.jakewharton:butterknife:$rootProject.butterknife_version"
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.butterknife_compiler_version"
    implementation "com.squareup.retrofit2:retrofit:$rootProject.retrofit_version"

    implementation "com.facebook.stetho:stetho:$rootProject.stetho_version"
    implementation "com.facebook.stetho:stetho-okhttp3:$rootProject.stetho_okhttp3_version"
    implementation "com.facebook.stetho:stetho-js-rhino:$rootProject.stetho_js_rhino_version"
    implementation "com.squareup.okhttp3:okhttp:$rootProject.okhttp3_version"
    implementation "com.orhanobut:logger:$rootProject.logger_version"
    implementation "org.greenrobot:eventbus:$rootProject.eventbus_version"
    implementation "junit:junit:$rootProject.junit_version"
    testImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.leakcanary_android_no_op_version"
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$rootProject.leakcanary_android"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.leakcanary_android_no_op_version"
}